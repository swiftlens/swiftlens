name: Publish Main to PyPI

on:
  workflow_dispatch:
    inputs:
      confirm_version:
        description: 'Confirm version to publish (must match current version in code)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release after publishing'
        required: true
        type: boolean
        default: true

jobs:
  validate-and-test:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Verify version consistency and match input
      id: version
      run: |
        # Extract version from pyproject.toml
        PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        # Extract version from _version.py
        VERSION_PY=$(python -c "exec(open('swiftlens/_version.py').read()); print(__version__)")
        
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "_version.py version: $VERSION_PY"
        echo "Input version: ${{ github.event.inputs.confirm_version }}"
        
        # Check version consistency
        if [ "$PYPROJECT_VERSION" != "$VERSION_PY" ]; then
          echo "Error: Version mismatch between pyproject.toml and _version.py"
          exit 1
        fi
        
        # Check input matches current version
        if [ "$PYPROJECT_VERSION" != "${{ github.event.inputs.confirm_version }}" ]; then
          echo "Error: Input version does not match current version in code"
          echo "Current version: $PYPROJECT_VERSION"
          echo "Input version: ${{ github.event.inputs.confirm_version }}"
          exit 1
        fi
        
        # Check if tag already exists
        if git ls-remote --tags origin | grep -q "refs/tags/v$PYPROJECT_VERSION"; then
          echo "Error: Tag v$PYPROJECT_VERSION already exists"
          echo "Please update the version in pyproject.toml and _version.py before publishing"
          exit 1
        fi
        
        echo "VERSION=$PYPROJECT_VERSION" >> $GITHUB_ENV
        echo "version=$PYPROJECT_VERSION" >> $GITHUB_OUTPUT

    - name: Check formatting
      run: |
        ./format.sh check

    - name: Run linting
      run: |
        make lint

    - name: Run tests
      run: |
        make test-unit

  publish-to-pypi:
    needs: validate-and-test
    runs-on: ubuntu-latest
    environment: pypi-production
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for tagging

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build
        echo "Package contents:"
        ls -la dist/

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Create and push tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "v${{ needs.validate-and-test.outputs.version }}" -m "Release v${{ needs.validate-and-test.outputs.version }}"
        git push origin "v${{ needs.validate-and-test.outputs.version }}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Publishing version ${{ needs.validate-and-test.outputs.version }} to PyPI..."
        twine upload dist/*

  create-release:
    needs: [validate-and-test, publish-to-pypi]
    if: github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Get previous tag
      id: prev_tag
      run: |
        # Get the previous tag before the current one
        PREV_TAG=$(git describe --tags --abbrev=0 v${{ needs.validate-and-test.outputs.version }}^ 2>/dev/null || echo "")
        echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate-and-test.outputs.version }}"
        PREV_TAG="${{ steps.prev_tag.outputs.previous_tag }}"
        
        echo "## SwiftLens v${VERSION}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "pip install swiftlens==${VERSION}" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### Changes since $PREV_TAG" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%an)" $PREV_TAG..v${VERSION} >> release_notes.md
        else
          echo "### Initial Release" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "Published to PyPI: https://pypi.org/project/swiftlens/${VERSION}/" >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate-and-test.outputs.version }}
        name: Release v${{ needs.validate-and-test.outputs.version }}
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false